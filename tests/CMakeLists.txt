cmake_minimum_required(VERSION 2.8)
cmake_policy(SET CMP0048 NEW)
cmake_policy(SET CMP0046 OLD)
project(SQLiteXXTests CXX)

file(GLOB SOURCES "src/*.cpp")

if (SQLITEXX_TEST_INSTALL)
    message(STATUS "Tests will depend on a installed version of SQLiteXX")
    find_package(SQLiteXX 0.1.0 REQUIRED)
    add_executable(SQLiteXXTests ${SOURCES})
    add_dependencies(SQLiteXXTests SQLiteXX::SQLiteXX)
    add_dependency_external(TARGET SQLiteXXTests PACKAGE SQLite3)
    add_dependency_external(TARGET SQLiteXXTests PACKAGE Catch)
    target_include_directories(SQLiteXXTests PRIVATE ${SQLITE3_INCLUDE_DIR})
    target_include_directories(SQLiteXXTests PRIVATE ${CATCH_INCLUDE_DIR})
    target_link_libraries(SQLiteXXTests ${SQLITE3_LIBRARY})
    target_link_libraries(SQLiteXXTests SQLiteXX::SQLiteXX)
    target_link_libraries(SQLiteXXTests ${CMAKE_THREAD_LIBS_INIT} ${CMAKE_DL_LIBS})
else()
    find_package(Threads REQUIRED)
    add_executable(SQLiteXXTests ${SOURCES})
    add_dependencies(SQLiteXXTests SQLiteXX)
    add_dependency_external(TARGET SQLiteXXTests PACKAGE Catch)
    target_include_directories(SQLiteXXTests PRIVATE ${SQLITE3_INCLUDE_DIR})
    target_include_directories(SQLiteXXTests PRIVATE ${CATCH_INCLUDE_DIR})
    target_include_directories(SQLiteXXTests PRIVATE ${SQLITEXX_INCLUDE_DIR})
    target_link_libraries(SQLiteXXTests ${SQLITE3_LIBRARY})
    target_link_libraries(SQLiteXXTests ${SQLITEXX_LIBRARIES})
    target_link_libraries(SQLiteXXTests ${CMAKE_THREAD_LIBS_INIT} ${CMAKE_DL_LIBS})
    target_compile_features(SQLiteXXTests PUBLIC cxx_range_for cxx_noexcept cxx_generic_lambdas)
endif()

if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    target_compile_options(SQLiteXXTests PRIVATE /W4)
elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang|AppleClang|GNU")
    target_compile_options(SQLiteXXTests PRIVATE -Wall -Wextra -pedantic)
endif()

set(DRMEMORY_COMMAND_ARGS -batch -exit_code_if_errors 1)
set(VALGRIND_COMMAND_ARGS --trace-children=yes --leak-check=full --errors-for-leak-kinds=definite --error-exitcode=1)
function(add_memcheck_test name binary args)
    add_test(NAME ${name} COMMAND $<TARGET_FILE:${binary}> ${args})
    if(CTEST_MEMCHECK)
        if(DRMEMORY_COMMAND)
            add_test(NAME DrMemory_${name} COMMAND ${DRMEMORY_COMMAND} ${DRMEMORY_COMMAND_ARGS} -- $<TARGET_FILE:${binary}> ${args})
        endif()
        if(VALGRIND_COMMAND)
            add_test(NAME Valgrind_${name} COMMAND ${VALGRIND_COMMAND} ${VALGRIND_COMMAND_ARGS} $<TARGET_FILE:${binary}> ${args})
        endif()
    endif()
endfunction(add_memcheck_test)

add_memcheck_test(SQLiteXX_DBConnection   SQLiteXXTests [DBConnection])
add_memcheck_test(SQLiteXX_Statement      SQLiteXXTests [Statement])
add_memcheck_test(SQLiteXX_Value          SQLiteXXTests [Value])
add_memcheck_test(SQLiteXX_Transaction    SQLiteXXTests [Transaction])
add_memcheck_test(SQLiteXX_Backup         SQLiteXXTests [Backup])
add_memcheck_test(SQLiteXX_Blob           SQLiteXXTests [Blob])
add_memcheck_test(SQLiteXX_Function       SQLiteXXTests [Functions])
add_memcheck_test(SQLiteXX_Threading      SQLiteXXTests [Threading])
